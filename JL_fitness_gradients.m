function [fitgradHval,fitgradPval,tolJvalvec,alphavalvec,R0counter]=JL_fitness_gradients(SSres,startH,startP,finH,finP,a0,g,q,c1,c2,rJ,rA,tA,f,beta0,bJ,bA,gamma,initvec,orig_tmax)

% This function determines the values of the host and parasite fitness
% gradients for different values of the host and parasite traits. 

% Set up vectors to use later:
fitgradHval=zeros(SSres);
fitgradPval=zeros(SSres);
tolJvalvec = linspace(startH,finH,SSres);
alphavalvec = linspace(startP,finP,SSres);
R0counter=0;

% For each value of tolerance and virulence we determine the fitness
% gradients:
for j=1:SSres
    for k=1:SSres
        tJ=tolJvalvec(j);
        alpha=alphavalvec(k);
        
        a=a0*(1-c1*(1-exp(c2*tJ))/(1-exp(c2)));
        
        % Check that the host population is viable in the absence of
        % disease:
        hostviability=a*g>bA*(bJ+g);
        
        if(hostviability)
            
            % Check that the disease is viable:
            R0=(beta0*(a*g-bA*(bJ+g))*(bA*(1-rJ)*sqrt(alpha)*(bA+gamma+alpha*(1-tA))+bA*(1-rJ)*sqrt(alpha)*g+(1-rA)*sqrt(alpha)*g*(bJ+gamma+g+alpha*(1-tJ))))/(a*g*q*(bA+g)*(bJ+gamma+g+alpha*(1-tJ))*(bA+gamma+alpha*(1-tA)));
    
           
            if(R0>1)
                % Find the endemic equilibrium:
                [SJ,SA,IJ,IA,problem_marker]=endemic_equilibrium_function(tJ,tA,rJ,rA,g,a,q,beta0,bJ,bA,f,alpha,gamma,initvec,orig_tmax);
                
                % These are the expressions for the fitness gradients
                % generated by the code called 'JL_fitgrad_expressions'.
                if problem_marker==0
                        fitgradHval(j,k)=- (a0*g*(alpha*(bA + gamma - alpha*(tA - 1)) - alpha*beta0*f*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*((c1*(exp(c2*tJ) - 1))/(exp(c2) - 1) - 1)*(q*(IA + IJ + SA + SJ) - 1))/(((bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1)) + beta0*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1)))*(bJ + g - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rJ - 1)) + gamma*(beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(rJ - 1)*(bA + gamma - alpha*(tA - 1)) + beta0^2*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))^2*(rA - 1)*(rJ - 1))) - (a0*((c1*(exp(c2*tJ) - 1))/(exp(c2) - 1) - 1)*(q*(IA + IJ + SA + SJ) - 1)*(alpha*(bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(bA + gamma - alpha*(tA - 1)) + alpha*beta0*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(g*(beta0*f*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1)) - (bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1)) + beta0*f*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(rJ - 1)) + beta0*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rJ - 1))*(bJ + g - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rJ - 1)))/(((bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1)) + beta0*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1)))*(bJ + g - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rJ - 1)) + gamma*(beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(rJ - 1)*(bA + gamma - alpha*(tA - 1)) + beta0^2*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))^2*(rA - 1)*(rJ - 1)))^2 - (a0*c1*c2*exp(c2*tJ)*(q*(IA + IJ + SA + SJ) - 1)*(g*(beta0*f*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1)) - (bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1)) + beta0*f*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(rJ - 1)) + beta0*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rJ - 1)))/((((bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1)) + beta0*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1)))*(bJ + g - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rJ - 1)) + gamma*(beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(bA - beta0*(IA*alpha^(1/2) + IJ*alpha^(1/2))*(rA - 1))*(rJ - 1)*(bA + gamma - alpha*(tA - 1)) + beta0^2*gamma*(IA*alpha^(1/2) + IJ*alpha^(1/2))^2*(rA - 1)*(rJ - 1)))*(exp(c2) - 1));
                        fitgradPval(j,k)=- (SJ*beta0*(rJ - 1)*(g/(2*alpha^(1/2)) + (bA + gamma - alpha*(tA - 1))/(2*alpha^(1/2)) - alpha^(1/2)*(tA - 1)) - SA*alpha^(1/2)*beta0*(rA - 1)*(tJ - 1) + (SA*beta0*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1)))/(2*alpha^(1/2)))/((bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1))) - ((tA - 1)*(SJ*beta0*(alpha^(1/2)*g + alpha^(1/2)*(bA + gamma - alpha*(tA - 1)))*(rJ - 1) + SA*alpha^(1/2)*beta0*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1))))/((bA + gamma - alpha*(tA - 1))^2*(bJ + g + gamma - alpha*(tJ - 1))) - ((tJ - 1)*(SJ*beta0*(alpha^(1/2)*g + alpha^(1/2)*(bA + gamma - alpha*(tA - 1)))*(rJ - 1) + SA*alpha^(1/2)*beta0*(rA - 1)*(bJ + g + gamma - alpha*(tJ - 1))))/((bA + gamma - alpha*(tA - 1))*(bJ + g + gamma - alpha*(tJ - 1))^2);
                else
                    fitgradHval(j,k)=NaN;
                    fitgradPval(j,k)=NaN;
                end
                
            else % If there is no disease then resistance should always 
                 % decrease
                fitgradHval(j,k)=-1;
                fitgradPval(j,k)=NaN;
                R0counter=R0counter+1;
            end
        else % If the host population is not viable then there are no hosts
             % to exhibit the trait and hence no fitness gradients
            fitgradHval(j,k)=NaN;
            fitgradPval(j,k)=NaN;
        end
    end
end

end